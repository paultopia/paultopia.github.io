<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://paultopia.github.io' rel='self' type='application/rss+xml'/>
<title>
Experiments in Tech Blogging (!!)
</title>
<link>
http://paultopia.github.io
</link>
<description>
let's see, eh?
</description>
<lastBuildDate>
Tue, 05 Sep 2017 22:03:26 -0500
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://paultopia.github.io/posts-output/mathjax/
</guid>
<link>
http://paultopia.github.io/posts-output/mathjax/
</link>
<title>
Getting Mathjax to Play Nicely with Markdown and Highlight.js
</title>
<description>
&lt;p&gt;Mathjax and markdown tend to fight with one another a bit.  When I started blogging math notes on here, the combination of Mathjax and Cryogen's markdown parser and Highlight.js fought with one another a lot.  So here's a quick tutorial on fixing it.&lt;/p&gt;&lt;p&gt;The assumption here is that you want to write in normal markdown, i.e., the kind of thing that you could convert to a PDF with pandoc.  And you want to write latex math.  But you observe that doing so blows up when you convert to html and use mathjax.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;My fix definitely works for me, using &lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt;, but YMMV if you use some other markdown parser/static site generator. &lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;step&amp;#95;1:&amp;#95;basic&amp;#95;setup&quot;&gt;&lt;/a&gt;Step 1: Basic Setup&lt;/h3&gt;&lt;p&gt;Mathjax isn't set up out of the box to recognize the delimiters typically used in Markdown for latex blocks.  So you need to tweak the Mathjax config. &lt;a href='https://github.com/paultopia/experimental-cryogen/blob/master/resources/templates/themes/nucleus/html/base.html#L105'&gt;Here's how I did it&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
 MathJax.Hub.Config&amp;#40;{tex2jax: {inlineMath: &amp;#91;&amp;#91;'$','$'&amp;#93;&amp;#93;,
                               displayMath: &amp;#91;&amp;#91;'$$','$$'&amp;#93;&amp;#93;,
                               processEscapes: true,
                               skipTags: &amp;#91;&amp;quot;script&amp;quot;,&amp;quot;noscript&amp;quot;,&amp;quot;style&amp;quot;,&amp;quot;textarea&amp;quot;&amp;#93;
 }}&amp;#41;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Important parts: pass it the $ delimiters for both inline and display (block) math.  Also, change the skipTags setting, because the &lt;a href='http://docs.mathjax.org/en/latest/options/tex2jax.html'&gt;default&lt;/a&gt; skips pre and code blocks, which you don't want &amp;mdash; the next step will have you putting latex in a code block, and if you don't change this setting, then Mathjax will decline to process those blocks.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;first&amp;#95;problem:&amp;#95;superscript&amp;#95;and&amp;#95;such.&amp;#95;&amp;#95;stick&amp;#95;it&amp;#95;in&amp;#95;a&amp;#95;code&amp;#95;block.&quot;&gt;&lt;/a&gt;First Problem: Superscript and Such.  Stick it in a code block.&lt;/h3&gt;&lt;p&gt;A number of the characters used in LaTeX (look, I gave it the silly capitalization! No more.) have their own meaning in Markdown; I have particular problems with superscript and subscript. One possible solution is to just escape them all, but that gets really ugly really quick.  An easier fix is just to stick everything in a code block. &lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;second&amp;#95;problem:&amp;#95;syntax&amp;#95;highlighting.&quot;&gt;&lt;/a&gt;Second problem: syntax highlighting.&lt;/h3&gt;&lt;p&gt;So if you also use Highlight.js, then it turns out that putting latex in codeblocks means that it'll try to identify the language (incorrectly) and add a bunch of highlighter classes for the css.  Which, naturally, again blows up mathjax rendering.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;The solution there is to slap a nohighlight class on the block-level code blocks (blessedly, highlight.js doesn't seem to tamper with inline code blocks). &lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;third&amp;#95;problem:&amp;#95;what&amp;#95;if&amp;#95;you&amp;#95;want&amp;#95;to&amp;#95;mangle&amp;#95;your&amp;#95;markdown&amp;#95;by&amp;#95;hand?&quot;&gt;&lt;/a&gt;Third problem: what if you want to mangle your markdown by hand?&lt;/h3&gt;&lt;p&gt;All this stuff seems like extra typing.  I don't like extra typing.  So ultimately, what I did was write &lt;a href='https://github.com/paultopia/experimental-cryogen/blob/master/preprocess-math.cljs'&gt;a preprocessor&lt;/a&gt; that takes a normal markdown file (plus the cryogen header information). It's really quite simple, it just loads the file, looks for a &quot;mathy&quot; header, and, if it finds one, sticks all the latex into appropriate code blocks.&lt;/p&gt;&lt;p&gt;Here are the guts:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn fix-inline-math &amp;#91;post&amp;#93;
  {:text &amp;#40;replace &amp;#40;:text post&amp;#41; #&amp;quot;&amp;#91;&amp;#94;$&amp;#93;&amp;#40;\$&amp;#91;&amp;#94;$&amp;#93;+?\$&amp;#41;&amp;#91;&amp;#94;$&amp;#93;&amp;quot; &amp;quot; `$1` &amp;quot;&amp;#41; :filename &amp;#40;:filename post&amp;#41;}&amp;#41;

&amp;#40;defn fix-block-math &amp;#91;post&amp;#93;
  {:text 
   &amp;#40;replace &amp;#40;:text post&amp;#41; #&amp;quot;&amp;#91;&amp;#94;$&amp;#93;&amp;#40;\$\$&amp;#91;&amp;#94;$&amp;#93;+?\$\$&amp;#41;&amp;#91;&amp;#94;$&amp;#93;&amp;quot; &amp;quot;\n\n```nohighlight \n $1 \n```\n\n&amp;quot;&amp;#41;
   :filename &amp;#40;:filename post&amp;#41;}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Easy.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 24 Jul 2017 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://paultopia.github.io/posts-output/2016-01-07-docs/
</guid>
<link>
http://paultopia.github.io/posts-output/2016-01-07-docs/
</link>
<title>
Quick Start Guide
</title>
<description>
&lt;p&gt;This intro only documents a subset of Cryogen's features. For additional documentation please see the &lt;a href='http://cryogenweb.org'&gt;cryogen site&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Blog posts and pages with Markdown (default) or AsciiDoc&lt;/li&gt;&lt;li&gt;Tags&lt;/li&gt;&lt;li&gt;Table of contents generation&lt;/li&gt;&lt;li&gt;Plain HTML page templates&lt;/li&gt;&lt;li&gt;Code syntax highlighting&lt;/li&gt;&lt;li&gt;Disqus support&lt;/li&gt;&lt;li&gt;Sitemap generation&lt;/li&gt;&lt;li&gt;RSS feed generation&lt;/li&gt;&lt;li&gt;Sass/SCSS compilation&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You will need &lt;a href='https://github.com/technomancy/leiningen'&gt;Leiningen&lt;/a&gt; 2.5.0 or above installed.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;a&amp;#95;new&amp;#95;site&quot;&gt;&lt;/a&gt;Creating a New Site&lt;/h3&gt;&lt;p&gt;A new site can be created using the Cryogen template as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;running&amp;#95;the&amp;#95;server&quot;&gt;&lt;/a&gt;Running the Server&lt;/h3&gt;&lt;p&gt;The web server can be started from the &lt;code&gt;my-blog&lt;/code&gt; directory using the &lt;code&gt;lein-ring&lt;/code&gt; plugin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server will watch for changes in the &lt;code&gt;resources/templates&lt;/code&gt; folder and recompile the content automatically.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;site&amp;#95;configuration&quot;&gt;&lt;/a&gt;Site Configuration&lt;/h3&gt;&lt;p&gt;The site configuration file is found at &lt;code&gt;templates/config.edn&lt;/code&gt;, this file looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:site-title         &amp;quot;My Awesome Blog&amp;quot;
 :author             &amp;quot;Bob Bobbert&amp;quot;
 :description        &amp;quot;This blog is awesome&amp;quot;
 :site-url           &amp;quot;http://blogawesome.com/&amp;quot;
 :post-root          &amp;quot;posts&amp;quot;
 :page-root          &amp;quot;pages&amp;quot;
 :post-root-uri      &amp;quot;posts-output&amp;quot;
 :page-root-uri      &amp;quot;pages-output&amp;quot;
 :tag-root-uri       &amp;quot;tags-output&amp;quot;
 :blog-prefix        &amp;quot;/blog&amp;quot;
 :rss-name           &amp;quot;feed.xml&amp;quot;
 :rss-filters        &amp;#91;&amp;quot;cryogen&amp;quot;&amp;#93;
 :recent-posts       3
 :post-date-format   &amp;quot;yyyy-MM-dd&amp;quot;
 :sass-src           nil
 :sass-dest          nil
 :theme              &amp;quot;blue&amp;quot;
 :resources          &amp;#91;&amp;quot;img&amp;quot;&amp;#93;
 :keep-files         &amp;#91;&amp;quot;.git&amp;quot;&amp;#93;
 :disqus?            false
 :disqus-shortname   &amp;quot;&amp;quot;
 :ignored-files      &amp;#91;#&amp;quot;\.#.&amp;#42;&amp;quot; #&amp;quot;.&amp;#42;\.swp$&amp;quot;&amp;#93;
 :posts-per-page     5
 :blocks-per-preview 2
 :previews?          false
 :clean-urls?        true}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For information about each key please see the &lt;a href='http://cryogenweb.org/docs/configuration.html'&gt;&quot;Configuration&quot;&lt;/a&gt; portion of the Cryogen documentation site.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;switching&amp;#95;between&amp;#95;markdown&amp;#95;and&amp;#95;asciidoc&quot;&gt;&lt;/a&gt;Switching between Markdown and AsciiDoc&lt;/h3&gt;&lt;p&gt;Cryogen comes with Markdown support as default. If you want to use AsciiDoc instead, open the &lt;code&gt;project.clj&lt;/code&gt; in your created blog (e.g. &lt;code&gt;my-blog&lt;/code&gt;), and change the line in &lt;code&gt;:dependencies&lt;/code&gt; that says &lt;code&gt;cryogen-markdown&lt;/code&gt; to &lt;code&gt;cryogen-asciidoc&lt;/code&gt;. Instead of looking for files ending in &lt;code&gt;.md&lt;/code&gt; in the &lt;code&gt;resources/templates/md&lt;/code&gt; directory, the compiler will now look for files ending in &lt;code&gt;.asc&lt;/code&gt; in the &lt;code&gt;resources/templates/asc&lt;/code&gt; directory.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;selecting&amp;#95;a&amp;#95;theme&quot;&gt;&lt;/a&gt;Selecting a Theme&lt;/h3&gt;&lt;p&gt;The Cryogen template comes with two themes in the &lt;code&gt;resources/templates/themes&lt;/code&gt; folder. To change your blog's theme, change the value of the &lt;code&gt;:theme&lt;/code&gt; key in &lt;code&gt;config.edn&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;layouts&quot;&gt;&lt;/a&gt;Customizing Layouts&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://github.com/yogthos/Selmer'&gt;Selmer&lt;/a&gt; templating engine for layouts. Please refer to its documentation to see the supported tags and filters for the layouts.&lt;/p&gt;&lt;p&gt;The layouts are contained in the &lt;code&gt;resources/templates/themes/{theme}/html&lt;/code&gt; folder of the project. By default, the &lt;code&gt;base.html&lt;/code&gt; layout is used to provide the general layout for the site. This is where you would add static resources such as CSS and JavaScript assets as well as define headers and footers for your site.&lt;/p&gt;&lt;p&gt;Each page layout should have a name that matches the &lt;code&gt;:layout&lt;/code&gt; key in the page metadata and end with &lt;code&gt;.html&lt;/code&gt;. Page layouts extend the base layout and should only contain the content relevant to the page inside the &lt;code&gt;content&lt;/code&gt; block. For example, the &lt;code&gt;tag&lt;/code&gt; layout is located in &lt;code&gt;tag.html&lt;/code&gt; and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;{% extends &amp;quot;templates/html/layouts/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;posts-by-tag&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Posts tagged {{name}}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {% for post in posts %}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{post.uri}}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;code&amp;#95;syntax&amp;#95;highlighting&quot;&gt;&lt;/a&gt;Code Syntax Highlighting&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt; for code syntax highlighting. You can add more languages by replacing &lt;code&gt;templates/js/highlight.pack.js&lt;/code&gt; with a customized package from &lt;a href='https://highlightjs.org/download/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt; initHighlightingOnLoad&lt;/code&gt; function is called in &lt;code&gt;{theme}/html/base.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;deploying&amp;#95;your&amp;#95;site&quot;&gt;&lt;/a&gt;Deploying Your Site&lt;/h2&gt;&lt;p&gt;The generated static content will be found under the &lt;code&gt;resources/public&lt;/code&gt; folder. Simply copy the content to a static folder for a server such as Nginx or Apache and your site is now ready for service.&lt;/p&gt;&lt;p&gt;A sample Nginx configuration that's placed in &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; can be seen below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;server {
  listen 80 default&amp;#95;server;
  listen &amp;#91;::&amp;#93;:80 default&amp;#95;server ipv6only=on;
  server&amp;#95;name localhost &amp;lt;yoursite.com&amp;gt; &amp;lt;www.yoursite.com&amp;gt;;

  access&amp;#95;log  /var/log/blog&amp;#95;access.log;
  error&amp;#95;log   /var/log/blog&amp;#95;error.log;

  location / {
    alias       /var/blog/;
    error&amp;#95;page  404 = /404.html;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply set &lt;code&gt;yoursite.com&lt;/code&gt; to the domain of your site in the above configuration and ensure the static content is available at &lt;code&gt;/var/blog/&lt;/code&gt;. Finally, place your custom error page in the &lt;code&gt;/var/blog/404.html&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;More information on deployment can be found &lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;sites&amp;#95;made&amp;#95;with&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Some Sites Made With Cryogen&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://carmenla.me/blog/index.html'&gt;Creator's blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cryogenweb.org'&gt;Cryogen Documentation Site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yogthos.net/'&gt;Yogthos' blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.clojure.tn'&gt;Clojure :in Tunisia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://dl1ely.github.io'&gt;dl1ely.github.io&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jonase.github.io/nil-recur'&gt;nil/recur&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://tangrammer.github.io/'&gt;on the clojure move&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://blog.jethrokuan.com/'&gt;cognizance&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.agynamix.de'&gt;AGYNAMIX Site &amp; Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://eresident.me'&gt;e-Resident Me&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.chadstovern.com'&gt;Chad Stovern's blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://greative.jp/'&gt;Greative&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 07 Jan 2016 00:00:00 -0600
</pubDate>
</item>
</channel>
</rss>
